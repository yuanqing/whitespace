#!/bin/sh

#/ usage: whitespace file [start_line [end_line]]
#/   [-s [space_marker]]
#/   [-t [tab_marker]]
#/   [-r [carriage_return_marker]]
#/   [-n [newline_marker]]
#/   [-L [left_delimeter]]
#/   [-R [right_delimeter]]

__usage() {

  # pipe usage message to `stderr`
  grep '^#/' < "$0" | cut -c4- 1>&2

}

__error() {

  # pipe error message to `stderr`
  echo "whitespace: $1" 1>&2

  # pipe usage message to `stderr` if $2 is set
  if [ -n "$2" ]; then
    __usage
  fi

  exit 1

}

# error if $1 is not a positive integer
__assert_positive_integer() {

  # error if not integer
  case "$1" in
    *[!0-9]* )
      __error "$1: Not an integer"
      ;;
  esac

  # error if < 1
  if [ "$1" -lt 1 ]; then
    __error "$1: Not a positive integer"
  fi

}

__starts_with() {

  # return 0 if $2 is unset
  if [ -z $2 ]; then
    echo 0
  else
    # return 1 if $1 starts with $2, else prints 0
    case $1 in
      $2* ) echo 1;;
      * ) echo 0;;
    esac
  fi

}

# parse command line arguments
more_flags=1
while [ $# -gt 0 ]; do
  if [ "$more_flags" -eq 1 ]; then
    arg="$1"
    case "$1" in
      # flags with optional value
      -s | -t | -r | -n | -L | -R)
        # check if a value was specified after the flag
        if [ -z "$2" ] || [ "$(__starts_with $2 -)" -eq 1 ]; then
          val=""
        else
          val="$2"
          shift
        fi
        case "$arg" in
          -s) space="$val";;
          -t) tab="$val";;
          -r) carriage_return="$val";;
          -n) newline="$val";;
          -L) L="$val";;
          -R) R="$val";;
        esac
        ;;
      # bare arguments (ie. non-flag)
      *)
         if [ "$arg" = "--" ]; then
           more_flags=0
           shift
           continue
         fi
         if [ "$(__starts_with $arg -)" -eq 1 ]; then
           __error "$arg: Unrecognized option"
         fi
         args="$args $1"
         ;;
    esac
  else
    args="$args $1"
  fi
  shift
done

# set $file and $start_line
set -- $args
file=$1
start_line=$2
end_line=$3

# exit if $file not set
if [ ! -n "$file" ]; then
  __error "Need a file" 1
fi

# exit if $file doesn't exist
if [ ! -f "$file" ]; then
  __error "$file: No such file"
fi

# set variables to their default values if not already set via the command line
L=${L-"("}
R=${R-")"}
space=$L${space-'\\s'}$R
tab=$L${tab-'\\t'}$R
carriage_return=$L${carriage_return-'\\r'}$R
newline=$L${newline-'\\n'}$R

parse() {

  # use `od` to mark out the characters we want to visualise
  od -An -ta |

  # replace newlines with spaces; `od` output is over multiple lines
  tr '\n' ' ' |

  # replace the characters marked out by `od`
  sed -e "s/sp/$space/g" \
      -e "s/ht/$tab/g" \
      -e "s/cr/$carriage_return/g" \
      -e "s/nl/$newline/g" |

  # remove whitespace
  sed -e s/[[:space:]]*//g

}

# $start_line was specified
if [ -n "$start_line" ]; then

  # error if $start_line is not a positive integer
  __assert_positive_integer "$start_line"

  # $end_line was specified
  if [ -n "$end_line" ]; then

    # error if $end_line is not a positive integer
    __assert_positive_integer "$end_line"

    # error if $start_line > $end_line
    if [ "$start_line" -gt "$end_line" ]; then
      __error "[$start_line, $end_line]: Invalid range"
    fi

    num_lines=`expr $end_line - $start_line + 1`

  else

    num_lines=1

  fi

  # get all lines in $file starting from $start_line
  tail -n+"$start_line" "$file" |

  # parse the first $num_lines
  head -"$num_lines" | parse

# $start_line was not specified
else

  # parse the entire $file
  cat $file | parse

fi
